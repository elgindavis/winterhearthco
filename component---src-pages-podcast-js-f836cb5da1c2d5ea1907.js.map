{"version":3,"sources":["webpack:///./src/pages/podcast.js"],"names":["edges","data","allMarkdownRemark","allEpisodes","transformPostQueryData","filter","content","contentType","hidden","useState","searchState","setSearchState","filteredEpisodeList","setEpisodeList","useEffect","document","title","className","style","paddingBottom","setPostList","type","posts","length","name","justifyContent","list","cover","id","query"],"mappings":"4FAAA,8FAYe,sBAAiD,IAAjBA,EAAgB,EAA7CC,KAAQC,kBAAqBF,MACrCG,EAAcC,YAAuBJ,GAAOK,QAC9C,SAACC,GAAD,MAAqC,YAAxBA,EAAQC,cAAgD,IAAnBD,EAAQE,UAFH,EAIrBC,mBAAS,IAAxCC,EAJoD,KAIvCC,EAJuC,OAKbF,mBAAS,IAAhDG,EALoD,KAK/BC,EAL+B,KAW3D,OAJAC,qBAAU,WACNC,SAASC,MAAQ,+CAClB,IAGD,kBAAC,IAAD,KACE,6BAASC,UAAU,2BACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,sCACb,kEACA,kBAAC,IAAD,CAAWC,MAAO,CAAEC,cAAe,UAK3C,iCACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,2CACb,kBAAC,IAAD,CACEG,YAAaP,EACbF,eAAgBA,EAChBU,KAAK,eACLC,MAAOnB,MAIb,yBAAKc,UAAU,SACI,KAAhBP,GACC,wBAAIO,UAAU,SAAd,gBAAoCP,GAErB,KAAhBA,GAAqD,IAA/BE,EAAoBW,QACzC,2DAEF,yBACEC,KAAK,wBACLP,UAAU,MACVC,MAAO,CAAEO,eAAgB,WAER,KAAhBf,GACC,kBAAC,IAAD,CAAkBgB,KAAMd,EAAqBe,OAAO,MAIzC,KAAhBjB,GACC,6BACE,2CADF,IACuB,8BAGzB,yBACEkB,GAAG,mBACHX,UAAU,MACVC,MAAO,CAAEO,eAAgB,WAEzB,kBAAC,IAAD,CAAkBC,KAAMvB,EAAawB,OAAO,SASnD,IAAME,EAAK","file":"component---src-pages-podcast-js-f836cb5da1c2d5ea1907.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { graphql } from \"gatsby\";\n\nimport {\n  Layout,\n  Separator,\n  SearchArea,\n  ContentStripList,\n} from \"../components\";\n\nimport { transformPostQueryData } from \"../utils\";\n\nexport default ({ data: { allMarkdownRemark: { edges } } }) => {\n    const allEpisodes = transformPostQueryData(edges).filter(\n        (content) => content.contentType === \"podcast\" && content.hidden !== true\n    );\n    const [searchState, setSearchState] = useState(\"\");\n    const [filteredEpisodeList, setEpisodeList] = useState([]);\n    \n    useEffect(() => {\n        document.title = \"More Human Podcast | Winter Hearth Studios\";\n    }, []);\n    \n    return (\n      <Layout>\n        <section className=\"recent-blog-area pt-120\">\n          <div className=\"container\">\n            <div className=\"row justify-content-center\">\n              <div className=\"col-md-12 pb-30 header-text center\">\n                <h1>Welcome to the More Human Podcast!</h1>\n                <Separator style={{ paddingBottom: 20 }} />\n              </div>\n            </div>\n          </div>\n        </section>\n        <section>\n          <div className=\"container\">\n            <div className=\"row justify-content-center\">\n              <div className=\"col-md-12 pb-60 text-center header-text\">\n                <SearchArea\n                  setPostList={setEpisodeList}\n                  setSearchState={setSearchState}\n                  type=\"all episodes\"\n                  posts={allEpisodes}\n                />\n              </div>\n            </div>\n            <div className=\"pb-40\">\n              {searchState !== \"\" && (\n                <h3 className=\"pb-40\">Results for: {searchState}</h3>\n              )}\n              {searchState !== \"\" && filteredEpisodeList.length === 0 && (\n                <p>No posts matched this search</p>\n              )}\n              <div\n                name=\"searched-post-section\"\n                className=\"row\"\n                style={{ justifyContent: \"center\" }}\n              >\n                {searchState !== \"\" && (\n                  <ContentStripList list={filteredEpisodeList} cover={true} />\n                )}\n              </div>\n            </div>\n            {searchState !== \"\" && (\n              <div>\n                <h2>Most Recent</h2> <br />\n              </div>\n            )}\n            <div\n              id=\"latest-posts-row\"\n              className=\"row\"\n              style={{ justifyContent: \"center\" }}\n            >\n              <ContentStripList list={allEpisodes} cover={true} />\n            </div>\n          </div>\n        </section>\n      </Layout>\n    );\n};\n\n// This gets the { data } property onto our props parameter, and here we query for all markdown files\nexport const query = graphql`\n    query {\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    ...PostInfo\n                }\n            }\n        }\n    }\n`;"],"sourceRoot":""}