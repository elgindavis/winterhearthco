{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/utils/index.js"],"names":["props","postHTML","data","markdownRemark","html","postInfo","frontmatter","featuredPostList","transformPostQueryData","allMarkdownRemark","edges","filter","post","featured","keywords","imageUrl","imageAlt","url","location","href","title","description","className","style","borderRadius","marginTop","src","replace","alt","unsplashBadgeInfo","artistName","artistURL","artistUrl","tags","author","name","date","id","dangerouslySetInnerHTML","__html","padding","width","role","textAlign","summary","posts","query","postList","map","node","excerpt","articleLink","fields","slug","newsletterVolume","contentType"],"mappings":"oPASe,mBAACA,GACd,IAAMC,EAAWD,EAAME,KAAKC,eAAeC,KACrCC,EAAWL,EAAME,KAAKC,eAAeG,YAErCC,EADWC,YAAuBR,EAAME,KAAKO,kBAAkBC,OACnCC,QAAO,SAACC,GAAD,OAA4B,IAAlBA,EAAKC,YAExD,OACE,kBAAC,IAAD,CACEC,SAAUT,EAASS,SACnBC,SAAUV,EAASU,SACnBC,SAAUX,EAASW,SACnBC,IAAKjB,EAAMkB,SAASC,KACpBC,MAAOf,EAASe,MAChBC,YAAahB,EAASgB,aAEtB,+BAAQhB,EAASe,OAEjB,6BAASE,UAAU,sCACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,yBACEA,UAAU,qBACVC,MAAO,CAAEC,aAAc,EAAGC,UAAW,MACrCC,IAAKrB,EAASU,SAASY,QAAQ,SAAU,IACzCC,IAAKvB,EAASW,WAGdX,EAASwB,mBACiC,KAA1CxB,EAASwB,kBAAkBC,YACzB,kBAAC,IAAD,CACIA,WAAYzB,EAASwB,kBAAkBC,WACvCC,UAAW1B,EAASwB,kBAAkBG,cAMlD,kBAAC,IAAD,CACEC,KAAM5B,EAAS4B,KACfC,OAAQ7B,EAAS6B,OAAOC,KACxBC,KAAM/B,EAAS+B,OAGjB,yBAAKd,UAAU,uBACX,wBAAIA,UAAU,eAAejB,EAASe,OAEtC,yBAAKiB,GAAG,mBAAmBC,wBAAyB,CAAEC,OAAQtC,KAE9D,uBAAGsB,MAAO,CAAEiB,QAAS,gBAArB,qMAII,uBAAGrB,KAAK,2BAAR,oBAJJ,mBAOA,uBAAGA,KAAK,aAAaG,UAAU,8BAA/B,qBAMR,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,0CACb,yBACEmB,MAAM,MACNlB,MAAO,CAAEC,aAAc,KACvBE,IAAKrB,EAAS6B,OAAOnB,SACrBO,UAAU,WACVM,IAAKvB,EAAS6B,OAAOC,OAEvB,uBAAGhB,KAAMd,EAAS6B,OAAOnB,UACvB,4BAAKV,EAAS6B,OAAOC,OAEvB,2BAAI9B,EAAS6B,OAAOQ,MACpB,uBAAGnB,MAAO,CAAEoB,UAAW,SAAWtC,EAAS6B,OAAOU,UAEpD,kBAAC,IAAD,CAAyBC,MAAOtC,WAUzC,IAAMuC,EAAK,c,oCCpGlB,gDAEatC,EAAyB,SAACuC,GACnC,OAAOA,EAASC,KAAI,SAAApC,GAChB,IAAMV,EAAOU,EAAKqC,KAClB,MAAO,CACHZ,GAAInC,EAAKmC,GACTa,QAAShD,EAAKgD,QACd5C,YAAaJ,EAAKI,YAClB8B,KAAMlC,EAAKI,YAAY8B,KACvBhB,MAAOlB,EAAKI,YAAYc,MACxB+B,YAAajD,EAAKkD,OAAOC,KACzBxC,SAAUX,EAAKI,YAAYO,SAC3ByC,iBAAkBpD,EAAKI,YAAYgD,iBACnCC,YAAarD,EAAKI,YAAYiD,YAC9BxC,SAAUb,EAAKI,YAAYS,SAC3BC,SAAUd,EAAKI,YAAYU,SAC3BiB,KAAM/B,EAAKI,YAAY2B,KACvBnB,SAAUZ,EAAKI,YAAYQ,SAC3BO,YAAanB,EAAKI,YAAYe,YAC9Ba,OAAQhC,EAAKI,YAAY4B","file":"component---src-templates-post-js-2349b1738f5b8f8c1fc7.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport UnsplashBadge from \"../components/UnsplashBadge\"\nimport BlogPostMetadata from \"../components/BlogPostMetadata\"\nimport PopularPostColumnWidget from \"../components/PopularPostColumn\"\n\nimport { transformPostQueryData } from \"../utils\";\n\nexport default (props) => {\n  const postHTML = props.data.markdownRemark.html;\n  const postInfo = props.data.markdownRemark.frontmatter;\n  const allPosts = transformPostQueryData(props.data.allMarkdownRemark.edges);\n  const featuredPostList = allPosts.filter((post) => post.featured === true);\n\n  return (\n    <Layout\n      keywords={postInfo.keywords}\n      imageUrl={postInfo.imageUrl}\n      imageAlt={postInfo.imageAlt}\n      url={props.location.href}\n      title={postInfo.title}\n      description={postInfo.description}\n    >\n      <title>{postInfo.title}</title>\n\n      <section className=\"post-content-area single-post-area\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-8 posts-list\">\n              <div className=\"single-post row\">\n                <div className=\"col-lg-12\">\n                  <div className=\"feature-img\">\n                    <img\n                      className=\"img-fluid lazyload\"\n                      style={{ borderRadius: 4, marginTop: \"3%\" }}\n                      src={postInfo.imageUrl.replace(/-400p/i, \"\")}\n                      alt={postInfo.imageAlt}\n                    />\n                    {\n                      postInfo.unsplashBadgeInfo &&\n                      postInfo.unsplashBadgeInfo.artistName !== \"\" &&\n                        <UnsplashBadge\n                            artistName={postInfo.unsplashBadgeInfo.artistName}\n                            artistURL={postInfo.unsplashBadgeInfo.artistUrl}\n                        />\n                    }\n                  </div>\n                </div>\n\n                <BlogPostMetadata\n                  tags={postInfo.tags}\n                  author={postInfo.author.name}\n                  date={postInfo.date}\n                />\n                \n                <div className=\"col-lg-11 col-md-11\">\n                    <h1 className=\"mt-30 mb-10\">{postInfo.title}</h1>\n\n                    <div id=\"markdown-content\" dangerouslySetInnerHTML={{ __html: postHTML }} />\n\n                    <p style={{ padding: \"8% 0 12px 0\" }}>\n                        Thanks so much for readingâ€” I hope you enjoyed this piece\n                        and took something away to make your life more\n                        meaningful and fulfilling. You can subscribe below to be notified about future posts from\n                        <a href=\"https://winterhearth.co\"> winterhearth.co</a> like\n                        this one!\n                    </p>\n                    <a href=\"#wh-signup\" className=\"primary-btn text-uppercase\">\n                        Join the Squad\n                    </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-4 sidebar-widgets\">\n              <div className=\"widget-wrap\">\n                <div className=\"single-sidebar-widget user-info-widget\">\n                  <img\n                    width=\"120\"\n                    style={{ borderRadius: 100 }}\n                    src={postInfo.author.imageUrl}\n                    className=\"lazyload\"\n                    alt={postInfo.author.name}\n                  />\n                  <a href={postInfo.author.imageUrl}>\n                    <h4>{postInfo.author.name}</h4>\n                  </a>\n                  <p>{postInfo.author.role}</p>\n                  <p style={{ textAlign: \"left\" }}>{postInfo.author.summary}</p>\n                </div>\n                <PopularPostColumnWidget posts={featuredPostList} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n         query($slug: String!) {\n           markdownRemark(fields: { slug: { eq: $slug } }) {\n             ...PostInfo\n           }\n           allMarkdownRemark(\n             sort: { fields: [frontmatter___date], order: DESC }\n           ) {\n             totalCount\n             edges {\n               node {\n                 id\n                 excerpt\n                 fields {\n                   slug\n                 }\n                 ...PostInfo\n               }\n             }\n           }\n         }\n       `;\n","import React from 'react';\n\nexport const transformPostQueryData = (postList) => {\n    return postList.map(post => {\n        const data = post.node;\n        return {\n            id: data.id,\n            excerpt: data.excerpt,\n            frontmatter: data.frontmatter,\n            date: data.frontmatter.date,\n            title: data.frontmatter.title,\n            articleLink: data.fields.slug,\n            featured: data.frontmatter.featured,\n            newsletterVolume: data.frontmatter.newsletterVolume,\n            contentType: data.frontmatter.contentType,\n            imageUrl: data.frontmatter.imageUrl,\n            imageAlt: data.frontmatter.imageAlt,\n            tags: data.frontmatter.tags,\n            keywords: data.frontmatter.keywords,\n            description: data.frontmatter.description,\n            author: data.frontmatter.author,\n        }\n    });\n};\n\nexport const setPostTags = (tags) => {\n    return tags.map((tag, index) => {\n        return index !== tags.length - 1 ? (\n            <li key={index}>{tag},&nbsp;</li>\n        ) : (\n                <li key={index}>{tag}</li>\n            );\n    });\n};\n"],"sourceRoot":""}